/*
1.46. Даны основания и высота равнобедренной трапеции. Найти периметр трапеции.
*/

package main

import (
	"math/rand"
	"fmt"
	"math"
	"time"
)

func get(min, max int) (int) { // генерация псевдослучайных (!!! - не путать с действительно случайными) чисел
	return rand.Intn(max-min) + min
}

// Надоело каждый раз писать формулу в конструкции fmt.Printf

func traps(a, b, h float64) (s float64) {
	if a>b {
		s = (a * h) - 0.5 * (a - b) * h
	} else {
		s = (b * h) - 0.5 * (b - a) * h
	}
	return s
}

func trapp(a, b, h float64) (p float64) {
	if a > b { // черт его знает, как будут сгенерированы длины оснований - проверяем какая больше, какая меньше
		p = (a + b) + 2 * math.Sqrt(math.Pow((a - b),2) + math.Pow(h, 2))
	} else {
		p = (a + b) + 2 * math.Sqrt(math.Pow((b - a),2) + math.Pow(h, 2))
	}
	return p
}
// Решил оформить отдельными функциями, для упрощенного редактирования и изменения

func main() {
	rand.Seed(time.Now().Unix()) // "сеим" случайности в основоной функции
	d := get(1, 10000) // рандомизация диапазона длины оснований.
	a := float64(get(1, d)) 
	b := float64(get(1, d))
	h := float64(get(1, d))

	fmt.Println("\nДаны основания равнобедренной трапеции и её высота\n")
	fmt.Printf("%s\t%.0f\n%s\t%.0f\n%s\t\t%.0f\n\n", "a (первое основание) ", a, "b (второе основание) ", b, "h (высота) ", h)
	fmt.Printf("%s\t%.0f\n", "Площадь трапеции ", traps(a, b, h))   // это вне условия задачи решили вдруго найти площадь
	fmt.Printf("%s\t%.0f\n", "Периметр трапеции ", trapp(a, b, h))   // это то, о чём спрашивалось в задаче
	// по хорошему надо бы посчитать
} 	// правильную ли величину возвращает функция
