/*
1.48. Треугольник задан координатами своих вершин. Найти периметр и площадь треугольника.
*/

package main

import (
	"math/rand"
	"fmt"
	"math"
	"time"
)

func get(min, max int) (int) { // генерация псевдослучайных (!!! - не путать с действительно случайными) чисел
	return rand.Intn(max-min) + min
}

// Надоело каждый раз писать формулу в конструкции fmt.Printf

func dst(x1, x2, x3, y1, y2, y3 float64) (p float64) {
	a12 := math.Sqrt(math.Pow((x1-x2), 2) + math.Pow((y1-y2), 2))
	a23 := math.Sqrt(math.Pow((x2-x3), 2) + math.Pow((y2-y3), 2))
	a31 := math.Sqrt(math.Pow((x3-x1), 2) + math.Pow((y3-y1), 2))
	p = a12 + a23 + a31
	return p
}

// Решил оформить отдельными функциями, для упрощенного редактирования и изменения

func main() {
	rand.Seed(time.Now().Unix()) // "сеим" случайности в основоной функции
	d := get(1, 10000) // рандомизация диапазона в котором будут лежать точки
	x1 := float64(get(-d, d)) // кстати, дурацкая ситуация: много копий сломано как сделать в Go число отрицательным. И я тоже поддался на эти провокации 
	x2 := float64(get(-d, d))
	x3 := float64(get(-d, d))
	y1 := float64(get(-d, d))
	y2 := float64(get(-d, d))
	y3 := float64(get(-d, d))
	fmt.Println("\nДаны координаты двух точек на плоскости\n")
	fmt.Printf("%s%.0f/%.0f\n%s%.0f/%.0f\n%s%.0f/%.0f\n\n", "x₁y₁ (первая точка) ", x1, y1, "x₂y₂ (вторая точка) ", x2, y2, "x3y3 (третья точка) ", x3, y3)
	fmt.Printf("%s%.0f\n", "Периметр треугольника ", dst(x1, x2, x3, y1, y2, y3))   // всё таки мы доверчивые люди
	// по хорошему надо бы посчитать
} 	// правильную ли величину возвращает функция
